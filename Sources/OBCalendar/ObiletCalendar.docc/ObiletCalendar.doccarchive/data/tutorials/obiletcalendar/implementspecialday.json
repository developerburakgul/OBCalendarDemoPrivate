{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay"},"metadata":{"title":"Implement Special Day ","category":"Tutorial","categoryPathComponent":"ObiletCalendar","role":"project"},"variants":[{"paths":["\/tutorials\/obiletcalendar\/implementspecialday"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","sections":[{"title":"Implement Special Day ","estimatedTimeInMinutes":10,"content":[{"inlineContent":[{"type":"text","text":"Implement special day"}],"type":"paragraph"}],"kind":"hero","chapter":"Implement Special Day View"},{"tasks":[{"anchor":"Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Create your custom special day"}],"type":"paragraph"}]}],"stepsSection":[{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create "},{"code":"OBCalendarWithSpecialDay.swift","type":"codeVoice"},{"type":"text","text":" file"}],"type":"paragraph"}],"type":"step","runtimePreview":"c4-t1-s1-step1.png","media":null,"code":"c4-t1-s1-step1.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Get "},{"type":"codeVoice","code":"specialDays"},{"text":" in ","type":"text"},{"code":"Init","type":"codeVoice"},{"type":"text","text":" function of "},{"code":"OBCalendarWithSpecialDay","type":"codeVoice"},{"text":" and get ","type":"text"},{"code":"specialDays","type":"codeVoice"},{"type":"text","text":" from "},{"type":"codeVoice","code":"makeSpecialDays"},{"text":" Type method.","type":"text"}]}],"code":"c4-t1-s1-step2.swift","media":null,"type":"step","runtimePreview":"c4-t1-s1-step2.png","content":[{"inlineContent":[{"text":"Add ","type":"text"},{"code":"specialDays","type":"codeVoice"},{"text":" variable to hold special days.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":"c4-t1-s1-step3.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create extension for dictionary to use for "},{"type":"codeVoice","code":"specialDay"}]}],"media":null,"caption":[],"code":"c4-t1-s1-step3.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"modifySpecialDayView(model:content:)","type":"codeVoice"},{"text":" to create small heart in dayView","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"modifySpecialDayView(model:content:)","type":"codeVoice"},{"text":" in dayView","type":"text"}],"type":"paragraph"}],"type":"step","code":"c4-t1-s1-step4.swift","runtimePreview":"c4-t1-s1-step4.png"},{"code":"c4-t1-s1-step5.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"makeSpecialDaysView(year:month:)"}]}],"type":"step","runtimePreview":"c4-t1-s1-step5.png","caption":[]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"modifySpecialDayView(model:content:)","type":"codeVoice"},{"text":" in dayView","type":"text"}]}],"caption":[],"code":"c4-t1-s1-step6.swift","runtimePreview":"c4-t1-s1-step6.png"}]}],"kind":"tasks"}],"hierarchy":{"paths":[["doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/$volume","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View"]],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","modules":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","projects":[{"sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","kind":"task"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject"},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view"}]}]},{"projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days"}]}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection"},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor","kind":"task"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","kind":"task"}]}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection"},{"projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day","kind":"task"}]}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View"}]},"references":{"c4-t1-s1-step5.png":{"type":"image","alt":"desc","identifier":"c4-t1-s1-step5.png","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step5.png"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Create-Demo-Project":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","abstract":[],"url":"\/tutorials\/obiletcalendar\/create-demo-project","role":"article","type":"topic","kind":"article","title":"Create Demo Project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"title":"Implement Double Date Selection","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","kind":"section","abstract":[{"text":"Some Text","type":"text"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"type":"section","title":"Add Weekdays View","abstract":[{"text":"Improve the user interface by adding weekdays and a header view.","type":"text"}],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection#Refactor":{"url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection#Refactor","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor","title":"Refactor","kind":"section","abstract":[{"text":"In future , will shown double selection so refactor this code.","type":"text"}],"role":"pseudoSymbol","type":"section"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"role":"project","url":"\/tutorials\/obiletcalendar\/improveuserinterface","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","title":"Improve User Interface","kind":"project","estimatedTime":"15min","type":"topic"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay":{"estimatedTime":"10min","kind":"project","type":"topic","url":"\/tutorials\/obiletcalendar\/implementspecialday","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","abstract":[{"type":"text","text":"Implement special day"}],"role":"project","title":"Implement Special Day "},"c4-t1-s1-step1.png":{"type":"image","alt":"desc","identifier":"c4-t1-s1-step1.png","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step1.png"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay#Implement-Your-Custom-Special-Day":{"abstract":[{"text":"Implement special day","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/implementspecialday#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","type":"section","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView":{"abstract":[],"role":"project","url":"\/tutorials\/obiletcalendar\/createskeletonview","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","title":"Create Skeleton View","kind":"project","estimatedTime":"10min","type":"topic"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Date-Selection":{"abstract":[],"kind":"article","role":"article","url":"\/tutorials\/obiletcalendar\/implement-date-selection","title":"Implement Date Selection","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection"},"c4-t1-s1-step4.swift":{"highlights":[{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":79},{"line":80},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":229},{"line":230},{"line":231},{"line":232},{"line":233},{"line":234}],"syntax":"swift","type":"file","fileType":"swift","identifier":"c4-t1-s1-step4.swift","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    let specialDays: [Date?: String]","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let dayView = Text(\"\\(day.day)\")","                .frame(height: 35)","                .frame(maxWidth: .infinity)","                .padding(.vertical,4)","                ","            let modifiedDayView = modifyDayView(model: day) {","                dayView","            }","            ","            modifySpecialDayView(model: day) {","                modifiedDayView","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"heart.fill\")","                                        .resizable()","                                        .frame(width: 8, height: 8)","                                        .foregroundColor(.red)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            ","            calendar.date(from: DateComponents(year: 2024, month: 10, day: 29)): \"Republic Day\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 10)): \"Atatürk Memorial Day\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"]},"c4-t1-s1-step3.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step3.png"}],"identifier":"c4-t1-s1-step3.png","alt":"desc","type":"image"},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/RangeType-swift.enum":{"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","kind":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeType","kind":"identifier"}],"url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/rangetype-swift.enum","title":"CalendarModel.Day.RangeType","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RangeType"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection":{"kind":"project","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection","abstract":[{"type":"text","text":"In future , will shown double selection so refactor this code."}],"estimatedTime":"20min","url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection","title":"Refactor Implement Single Date Selection","role":"project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"role":"project","abstract":[{"type":"text","text":"Change view of "},{"code":"day","type":"codeVoice"},{"type":"text","text":" by "},{"overridingTitle":"Date Type","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","isActive":true,"overridingTitleInlineContent":[{"text":"Date Type","type":"text"}],"type":"reference"},{"text":" and ","type":"text"},{"overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"overridingTitle":"Range Type","isActive":true,"type":"reference","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum"}],"type":"topic","url":"\/tutorials\/obiletcalendar\/changedayview","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","title":"Change Day View ","estimatedTime":"15min","kind":"project"},"c4-t1-s1-step1.swift":{"highlights":[],"syntax":"swift","type":"file","identifier":"c4-t1-s1-step1.swift","fileType":"swift","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            ","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarWithSpecialDay {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"]},"c4-t1-s1-step5.swift":{"highlights":[{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":156}],"identifier":"c4-t1-s1-step5.swift","type":"file","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    let specialDays: [Date?: String]","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let dayView = Text(\"\\(day.day)\")","                .frame(height: 35)","                .frame(maxWidth: .infinity)","                .padding(.vertical,4)","                ","            let modifiedDayView = modifyDayView(model: day) {","                dayView","            }","            ","            modifySpecialDayView(model: day) {","                modifiedDayView","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 12, height: 12)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(.red)","                            Text(specialDay.value)","                        }","                    }","                }","            }","        }","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"heart.fill\")","                                        .resizable()","                                        .frame(width: 8, height: 8)","                                        .foregroundColor(.red)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            ","            calendar.date(from: DateComponents(year: 2024, month: 10, day: 29)): \"Republic Day\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 10)): \"Atatürk Memorial Day\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"],"syntax":"swift","fileType":"swift"},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/DateType":{"abstract":[],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","type":"topic","navigatorTitle":[{"text":"DateType","kind":"identifier"}],"kind":"symbol","title":"CalendarModel.Day.DateType","url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/datetype","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DateType","kind":"identifier"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","kind":"section","role":"pseudoSymbol","title":"Create a new project and add ObiletCalendar","abstract":[],"type":"section"},"c4-t1-s1-step4.png":{"variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step4.png","traits":["1x","light"]}],"identifier":"c4-t1-s1-step4.png","alt":"desc","type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Special-Day-View":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View","title":"Implement Special Day View","kind":"article","role":"article","abstract":[],"type":"topic","url":"\/tutorials\/obiletcalendar\/implement-special-day-view"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","title":"Hide Some Days","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Change view of "},{"code":"day","type":"codeVoice"},{"type":"text","text":" by "},{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","overridingTitleInlineContent":[{"type":"text","text":"Date Type"}],"isActive":true,"overridingTitle":"Date Type","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","overridingTitle":"Range Type","type":"reference","overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"isActive":true}],"type":"section","url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days"},"c4-t1-s1-step2.swift":{"highlights":[{"line":14},{"line":19},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174}],"identifier":"c4-t1-s1-step2.swift","type":"file","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    let specialDays: [Date?: String]","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            ","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarWithSpecialDay {","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            ","            calendar.date(from: DateComponents(year: 2024, month: 10, day: 29)): \"Republic Day\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 10)): \"Atatürk Memorial Day\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"],"syntax":"swift","fileType":"swift"},"c4-t1-s1-step2.png":{"variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step2.png","traits":["1x","light"]}],"identifier":"c4-t1-s1-step2.png","alt":"desc","type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView#Add-a-customization-view":{"url":"\/tutorials\/obiletcalendar\/createskeletonview#Add-a-customization-view","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view","kind":"section","title":"Add a customization view","abstract":[],"role":"pseudoSymbol","type":"section"},"c4-t1-s1-step3.swift":{"highlights":[{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186}],"identifier":"c4-t1-s1-step3.swift","type":"file","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    let specialDays: [Date?: String]","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            ","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            ","            calendar.date(from: DateComponents(year: 2024, month: 10, day: 29)): \"Republic Day\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 10)): \"Atatürk Memorial Day\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"],"syntax":"swift","fileType":"swift"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date-Selection":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"Implement single date selection for users can select specific date","type":"text"}],"title":"Implement Single Date Selection","kind":"section","url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date-Selection","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"role":"project","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date"}],"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","kind":"project","title":"Implement Single Date Selection","estimatedTime":"15min","url":"\/tutorials\/obiletcalendar\/implementsingledateselection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"estimatedTime":"30min","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","kind":"project","abstract":[{"type":"text","text":"Some Text"}],"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","role":"project","type":"topic","title":"Implement Double Date Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Improve-User-Interface":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface","kind":"article","role":"article","url":"\/tutorials\/obiletcalendar\/improve-user-interface","title":"Improve User Interface","type":"topic","abstract":[]},"c4-t1-s1-step6.png":{"variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c4-t1-s1-step6.png","traits":["1x","light"]}],"identifier":"c4-t1-s1-step6.png","alt":"desc","type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","estimatedTime":"3min","title":"Setup Empty Project","kind":"project","role":"project","abstract":[]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar":{"role":"overview","abstract":[{"type":"text","text":"Create easily your custom calendar"}],"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","kind":"overview","title":"Meet ObiletCalendar","url":"\/tutorials\/obiletcalendar"},"c4-t1-s1-step6.swift":{"content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    let specialDays: [Date?: String]","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let dayView = Text(\"\\(day.day)\")","                .frame(height: 35)","                .frame(maxWidth: .infinity)","                .padding(.vertical,4)","                ","            let modifiedDayView = modifyDayView(model: day) {","                dayView","            }","            ","            modifySpecialDayView(model: day) {","                modifiedDayView","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","                ","                if !specialDays.isEmpty {","                    makeSpecialDaysView(year: model.year.year, month: model.month)","                        .frame(maxWidth: .infinity,alignment: .leading)","                        .padding()","                }","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 8, height: 8)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(.red)","                            Text(specialDay.value)","                        }","                    }","                }","            }","        }","    }","    ","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    modifiedContent","                        .foregroundColor(.black)","                }","            }else {","                Color.clear","            }","        }","    }","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"heart.fill\")","                                        .resizable()","                                        .frame(width: 8, height: 8)","                                        .foregroundColor(.red)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            ","            calendar.date(from: DateComponents(year: 2024, month: 10, day: 29)): \"Republic Day\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 10)): \"Atatürk Memorial Day\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarWithSpecialDay(calendar: calendar)","}"],"fileName":"OBCalendarWithSpecialDay.swift","identifier":"c4-t1-s1-step6.swift","highlights":[{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":151}],"type":"file","fileType":"swift","syntax":"swift"}}}