{"metadata":{"category":"Tutorial","categoryPathComponent":"ObiletCalendar","role":"project","title":"Refactor Implement Single Date Selection"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection"},"sections":[{"title":"Refactor Implement Single Date Selection","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In future , will shown double selection so refactor this code."}]}],"chapter":"Implement Date Selection","estimatedTimeInMinutes":20,"kind":"hero"},{"kind":"tasks","tasks":[{"anchor":"Refactor","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Refactor to create double date selection","type":"text"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"c3-t2-s1-step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Look at latest state of previous tutorial"}]}],"caption":[],"runtimePreview":null,"media":null,"type":"step"},{"runtimePreview":null,"code":"c3-t2-s1-step2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create helper "},{"type":"codeVoice","code":"contentBuilder"},{"type":"text","text":" function"}]}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create helper ","type":"text"},{"type":"codeVoice","code":"modifyDayView"},{"text":" function that takes ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"text":"model","type":"text"}],"overridingTitle":"model","type":"reference","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day"},{"type":"text","text":" as parameter"}]}],"code":"c3-t2-s1-step3.swift","caption":[],"media":null},{"type":"step","caption":[],"code":"c3-t2-s1-step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"modifyDayView","type":"codeVoice"},{"text":" function","type":"text"}]}],"runtimePreview":null,"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Move determining background color to "},{"code":"modifyDayView","type":"codeVoice"}],"type":"paragraph"}],"type":"step","caption":[],"code":"c3-t2-s1-step5.swift","runtimePreview":null,"media":null},{"type":"step","caption":[],"code":"c3-t2-s1-step6.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"selectDate(of:)"},{"type":"text","text":" function and use it in "},{"type":"codeVoice","code":"onTapGesture"}]}],"media":null},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Delete ","type":"text"},{"code":"today","type":"codeVoice"},{"type":"text","text":", "},{"code":"dayDate","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ZStack","type":"codeVoice"}]}],"media":null,"code":"c3-t2-s1-step7.swift","caption":[]}],"title":"Refactor"}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Implement Double Date Selection","abstract":[{"text":"Some Text","type":"text"}],"action":{"type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"overridingTitle":"Get started","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"}}],"kind":"project","hierarchy":{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","modules":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view","kind":"task"}]}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"task"}]},{"sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","kind":"task"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection"},{"sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","kind":"task"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day"}]}]}],"paths":[["doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/$volume","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/tutorials\/obiletcalendar\/refactorimplementsingledateselection"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay":{"estimatedTime":"10min","kind":"project","type":"topic","url":"\/tutorials\/obiletcalendar\/implementspecialday","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","abstract":[{"type":"text","text":"Implement special day"}],"role":"project","title":"Implement Special Day "},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/DateType":{"abstract":[],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","type":"topic","navigatorTitle":[{"text":"DateType","kind":"identifier"}],"kind":"symbol","title":"CalendarModel.Day.DateType","url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/datetype","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DateType","kind":"identifier"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay#Implement-Your-Custom-Special-Day":{"abstract":[{"text":"Implement special day","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/implementspecialday#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","type":"section","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"role":"project","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date"}],"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","kind":"project","title":"Implement Single Date Selection","estimatedTime":"15min","url":"\/tutorials\/obiletcalendar\/implementsingledateselection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView":{"abstract":[],"role":"project","url":"\/tutorials\/obiletcalendar\/createskeletonview","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","title":"Create Skeleton View","kind":"project","estimatedTime":"10min","type":"topic"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","estimatedTime":"3min","title":"Setup Empty Project","kind":"project","role":"project","abstract":[]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection":{"kind":"project","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection","abstract":[{"type":"text","text":"In future , will shown double selection so refactor this code."}],"estimatedTime":"20min","url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection","title":"Refactor Implement Single Date Selection","role":"project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar":{"role":"overview","abstract":[{"type":"text","text":"Create easily your custom calendar"}],"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","kind":"overview","title":"Meet ObiletCalendar","url":"\/tutorials\/obiletcalendar"},"c3-t2-s1-step1.swift":{"syntax":"swift","highlights":[],"type":"file","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if (dayDate < today) {","                        Text(\"\\(day.day)\")","                            .foregroundColor(.gray)","                    }else {","                        firstSelectedDate == day.date","                        ?","                        Text(\"\\(day.day)\")","                            .foregroundColor(.white)","                        :","                        Text(\"\\(day.day)\")","                            .foregroundColor(.black)","                        ","                    }","                }","            }","            .frame(width: 35, height: 35)","            .onTapGesture {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if dayDate >= today {","                        firstSelectedDate = day.date","                    }","                }","            }","            .background {","                if case .insideRange(.currentMonth) = day.rangeType,case firstSelectedDate = day.date {","                    Circle()","                        .foregroundColor(.green)","                }","            }","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}",""],"fileName":"OBCalendarDemo.swift","identifier":"c3-t2-s1-step1.swift","fileType":"swift"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date-Selection":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"Implement single date selection for users can select specific date","type":"text"}],"title":"Implement Single Date Selection","kind":"section","url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date-Selection","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Create-Demo-Project":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","abstract":[],"url":"\/tutorials\/obiletcalendar\/create-demo-project","role":"article","type":"topic","kind":"article","title":"Create Demo Project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection#Refactor":{"url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection#Refactor","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor","title":"Refactor","kind":"section","abstract":[{"text":"In future , will shown double selection so refactor this code.","type":"text"}],"role":"pseudoSymbol","type":"section"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView#Add-a-customization-view":{"url":"\/tutorials\/obiletcalendar\/createskeletonview#Add-a-customization-view","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view","kind":"section","title":"Add a customization view","abstract":[],"role":"pseudoSymbol","type":"section"},"c3-t2-s1-step3.swift":{"identifier":"c3-t2-s1-step3.swift","type":"file","fileName":"OBCalendarDemo.swift","highlights":[{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":164},{"line":216},{"line":217},{"line":218},{"line":219},{"line":220}],"fileType":"swift","syntax":"swift","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if (dayDate < today) {","                        Text(\"\\(day.day)\")","                            .foregroundColor(.gray)","                    }else {","                        firstSelectedDate == day.date","                        ?","                        Text(\"\\(day.day)\")","                            .foregroundColor(.white)","                        :","                        Text(\"\\(day.day)\")","                            .foregroundColor(.black)","                        ","                    }","                }","            }","            .frame(width: 35, height: 35)","            .onTapGesture {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if dayDate >= today {","                        firstSelectedDate = day.date","                    }","                }","            }","            .background {","                if case .insideRange(.currentMonth) = day.rangeType,case firstSelectedDate = day.date {","                    Circle()","                        .foregroundColor(.green)","                }","            }","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}","","","","",""]},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day","type":"topic","kind":"symbol","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Day","kind":"identifier"}],"url":"\/documentation\/obiletcalendar\/calendarmodel\/day","title":"CalendarModel.Day","role":"symbol","navigatorTitle":[{"text":"Day","kind":"identifier"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"role":"project","abstract":[{"type":"text","text":"Change view of "},{"code":"day","type":"codeVoice"},{"type":"text","text":" by "},{"overridingTitle":"Date Type","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","isActive":true,"overridingTitleInlineContent":[{"text":"Date Type","type":"text"}],"type":"reference"},{"text":" and ","type":"text"},{"overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"overridingTitle":"Range Type","isActive":true,"type":"reference","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum"}],"type":"topic","url":"\/tutorials\/obiletcalendar\/changedayview","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","title":"Change Day View ","estimatedTime":"15min","kind":"project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"title":"Implement Double Date Selection","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","kind":"section","abstract":[{"text":"Some Text","type":"text"}]},"c3-t2-s1-step7.swift":{"highlights":[{"line":70},{"line":71},{"line":72},{"line":73}],"syntax":"swift","type":"file","fileName":"OBCalendarDemo.swift","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                firstSelectedDate = day.date","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}"],"identifier":"c3-t2-s1-step7.swift","fileType":"swift"},"c3-t2-s1-step4.swift":{"syntax":"swift","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                modifyDayView(model: day) {","                    Text(\"\\(day.day)\")","                        .frame(width: 35, height: 35)","                }","            }","            .onTapGesture {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if dayDate >= today {","                        firstSelectedDate = day.date","                    }","                }","            }","            .background {","                if case .insideRange(.currentMonth) = day.rangeType,case firstSelectedDate = day.date {","                    Circle()","                        .foregroundColor(.green)","                }","            }","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    firstSelectedDate == model.date","                    ?","                    content()","                        .foregroundColor(.white)","                    :","                    content()","                        .foregroundColor(.black)","                    ","                }","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}","","","","",""],"type":"file","fileType":"swift","fileName":"OBCalendarDemo.swift","identifier":"c3-t2-s1-step4.swift","highlights":[{"line":73},{"line":74},{"line":75},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"role":"project","url":"\/tutorials\/obiletcalendar\/improveuserinterface","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","title":"Improve User Interface","kind":"project","estimatedTime":"15min","type":"topic"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Special-Day-View":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View","title":"Implement Special Day View","kind":"article","role":"article","abstract":[],"type":"topic","url":"\/tutorials\/obiletcalendar\/implement-special-day-view"},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/RangeType-swift.enum":{"type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","kind":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeType","kind":"identifier"}],"url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/rangetype-swift.enum","title":"CalendarModel.Day.RangeType","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RangeType"}]},"c3-t2-s1-step5.swift":{"highlights":[{"line":85},{"line":146},{"line":150},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":165},{"line":166}],"syntax":"swift","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                modifyDayView(model: day) {","                    Text(\"\\(day.day)\")","                        .frame(width: 35, height: 35)","                }","            }","            .onTapGesture {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if dayDate >= today {","                        firstSelectedDate = day.date","                    }","                }","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}","","","","",""],"type":"file","fileName":"OBCalendarDemo.swift","identifier":"c3-t2-s1-step5.swift","fileType":"swift"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"estimatedTime":"30min","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","kind":"project","abstract":[{"type":"text","text":"Some Text"}],"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","role":"project","type":"topic","title":"Implement Double Date Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","kind":"section","role":"pseudoSymbol","title":"Create a new project and add ObiletCalendar","abstract":[],"type":"section"},"c3-t2-s1-step2.swift":{"fileName":"OBCalendarDemo.swift","type":"file","fileType":"swift","identifier":"c3-t2-s1-step2.swift","syntax":"swift","highlights":[{"line":155},{"line":156},{"line":157},{"line":158},{"line":159}],"content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if (dayDate < today) {","                        Text(\"\\(day.day)\")","                            .foregroundColor(.gray)","                    }else {","                        firstSelectedDate == day.date","                        ?","                        Text(\"\\(day.day)\")","                            .foregroundColor(.white)","                        :","                        Text(\"\\(day.day)\")","                            .foregroundColor(.black)","                        ","                    }","                }","            }","            .frame(width: 35, height: 35)","            .onTapGesture {","                if case .insideRange(.currentMonth) = day.rangeType {","                    if dayDate >= today {","                        firstSelectedDate = day.date","                    }","                }","            }","            .background {","                if case .insideRange(.currentMonth) = day.rangeType,case firstSelectedDate = day.date {","                    Circle()","                        .foregroundColor(.green)","                }","            }","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}"]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"type":"section","title":"Add Weekdays View","abstract":[{"text":"Improve the user interface by adding weekdays and a header view.","type":"text"}],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Date-Selection":{"abstract":[],"kind":"article","role":"article","url":"\/tutorials\/obiletcalendar\/implement-date-selection","title":"Implement Date Selection","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","title":"Hide Some Days","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Change view of "},{"code":"day","type":"codeVoice"},{"type":"text","text":" by "},{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","overridingTitleInlineContent":[{"type":"text","text":"Date Type"}],"isActive":true,"overridingTitle":"Date Type","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","overridingTitle":"Range Type","type":"reference","overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"isActive":true}],"type":"section","url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Improve-User-Interface":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface","kind":"article","role":"article","url":"\/tutorials\/obiletcalendar\/improve-user-interface","title":"Improve User Interface","type":"topic","abstract":[]},"c3-t2-s1-step6.swift":{"highlights":[{"line":79},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144}],"syntax":"swift","content":["\/\/","\/\/  OBCalendarDemo.swift","\/\/  OBCalendarDemo","\/\/","\/\/  Created by Burak on 7.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemo: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: day.date)","            ZStack {","                modifyDayView(model: day) {","                    Text(\"\\(day.day)\")","                        .frame(width: 35, height: 35)","                }","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                firstSelectedDate = day.date","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemo {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemo(calendar: calendar)","}","","","","",""],"type":"file","fileName":"OBCalendarDemo.swift","identifier":"c3-t2-s1-step6.swift","fileType":"swift"}}}